SHapley Additive exPlanations (SHAP) Code
The code is provided in a user compatible format, allowing for the addition of other datasets.

#Jupyter Notebook version: 5.6.0
#Python 3 Kernel

import logging
logging.basicConfig()

import pandas
import matplotlib as matplotlib
matplotlib.use('TkAgg')
import matplotlib.pylab as pl
import shap
import sys
import xgboost

# load JS visualization code to notebook
shap.initjs()

#The saved excel document file path which contains the patient data:
FileName = '<path to excel sheet containing data>'

#Read the contents of the excel sheet into a Data File:
#Defaults to Sheet 1 of the excel File
DataFile = pandas.read_excel(FileName)

#Split the datafile into array X which contains the numeric values and selected feature names
X = DataFile.iloc[:, :(DataFile.shape[1] - 1)]

#Split the datafile into array Y which contains the labels that the algorithm will use to calculate loss
#In our excel files, these labels are the last column of the datafile and are integers
y = DataFile.iloc[:, (DataFile.shape[1] - 1)]

#Train the model on the entire dataset with accompanying labels:
model = xgboost.train({"learning_rate": 0.01}, xgboost.DMatrix(X, label=y), 100)

#SHAP Value Visualization Explains Model Output:
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X)

#Force Plot depicts the effect of biomarker values on the modelâ€™s output 
shap.force_plot(explainer.expected_value, shap_values[0,:], X.iloc[0,:])

#Dependency Plots relate specific biomarker values to model prediction and other tested biomarkers across the entire dataset
shap.dependence_plot("<input biomarker name to obtain dependency plot>", shap_values, X, dot_size = 150)
pl.show()

#Summary Plots depict the top influential biomarkers and how they influence model prediction 
shap.summary_plot(shap_values, X, max_display = 7)
pl.show()

#Bar Plot
shap.summary_plot(shap_values, X, plot_type="bar")
pl.show()

#Diagonal Dependency Comparisons
shap_interaction_values = shap.TreeExplainer(model).shap_interaction_values(X.iloc[:2000,:])
shap.summary_plot(shap_interaction_values, X.iloc[:2000,:], max_display = 4)
